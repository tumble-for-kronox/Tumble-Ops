---
- name: Initialize and deploy Kubernetes Cluster on Digital Ocean
  hosts: localhost
  vars_files:
    - ../../../../vault.yml

  tasks:
    - name: If past secrets exist, delete them
      shell: |
        kubectl delete secret grafana-admin -n monitoring
      ignore_errors: yes
      no_log: yes

    - name: Deploy the cluster using helm template
      shell: |
        helm template cluster ../../../../settings/prod/cluster > /tmp/cluster.yml

    - name: Apply cluster deployment YAML
      shell: kubectl apply -f /tmp/cluster.yml

    - name: Create Docker registry secret
      command: >
        kubectl create secret docker-registry ghcr-secret -n production
        --docker-server=ghcr.io --docker-username=adisve
        --docker-password={{ ghcr_token }}

    - name: Create Grafana admin secret
      command: >
        kubectl create secret generic grafana-admin --from-literal=admin-user='{{ grafana_admin_username }}' --from-literal=admin-password='{{ grafana_admin_pass }}' -n monitoring

    - name: Deploy middleware components
      shell: |
        for dir in ../../../../settings/prod/middleware/*; do
          namespace=$(basename "$dir")
          for component in "$dir"/*; do
            component_name=$(basename "$component")
            if [ "$component_name" = "prometheus" ]; then
              helm dependency update "$component"
              helm template $component_name $component --values=$component/values.yaml -n $namespace --set prometheus-node-exporter.hostRootFsMount.enabled=false > /tmp/$component_name.yml
            else
              helm dependency update "$component"
              helm template $component_name $component --values=$component/values.yaml -n $namespace > /tmp/$component_name.yml
            fi
            kubectl apply -f /tmp/$component_name.yml -n $namespace
          done
        done